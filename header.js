// header.js
// Tento s√∫bor spravuje dynamick√© zobrazenie navigaƒçn√Ωch odkazov v hlaviƒçke
// a obsluhuje akcie ako odhl√°senie pou≈æ√≠vateƒæa.
// Bol upraven√Ω tak, aby reagoval na zmeny v d√°tach registr√°cie a kateg√≥ri√≠ v re√°lnom ƒçase,
// a z√°rove≈à aby pravidelne kontroloval aktu√°lny ƒças, aby sa odkaz zobrazil alebo skryl
// presne v momente, keƒè sa prekroƒç√≠ d√°tum otvorenia alebo uzavretia registr√°cie.
// Nov√° funkcionalita: Prid√°va listener pre zobrazovanie notifik√°ci√≠ z datab√°zy pre administr√°torov.

// Importy pre potrebn√© Firebase funkcie
import { getAuth, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, doc, onSnapshot, collection, query, orderBy, limit } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

// Glob√°lna premenn√° na ulo≈æenie ID intervalu, aby sme ho mohli nesk√¥r zru≈°i≈•
let registrationCheckIntervalId = null;
let unsubscribeFromNotifications = null; // Nov√° glob√°lna premenn√° pre listener notifik√°ci√≠
let displayedNotificationTimestamps = new Set(); // S√∫bor pre ulo≈æenie ƒçasov√Ωch peƒçiatok zobrazen√Ωch notifik√°ci√≠


// Glob√°lna funkcia pre zobrazenie notifik√°ci√≠
// Vytvor√≠ a spravuje mod√°lne okno pre spr√°vy o √∫spechu alebo chyb√°ch
window.showGlobalNotification = (message, type = 'success') => {
    let notificationElement = document.getElementById('global-notification');
    
    // Ak element e≈°te neexistuje, vytvor√≠me ho a prid√°me do tela dokumentu
    if (!notificationElement) {
        notificationElement = document.createElement('div');
        notificationElement.id = 'global-notification';
        // Pou≈æ√≠vame Tailwind CSS triedy pre ≈°t√Ωlovanie a pozicovanie
        notificationElement.className = `
            fixed top-4 left-1/2 transform -translate-x-1/2 z-[100]
            p-4 rounded-lg shadow-lg text-white font-semibold transition-all duration-300 ease-in-out
            flex items-center space-x-2
            opacity-0 pointer-events-none
        `;
        document.body.appendChild(notificationElement);
    }

    // Nastav√≠me obsah a farbu na z√°klade typu notifik√°cie
    // Pre √∫spech pou≈æijeme farbu #3A8D41, pre chybu ƒçerven√∫
    const bgColor = type === 'success' ? 'bg-[#3A8D41]' : 'bg-red-600';
    notificationElement.className = notificationElement.className.replace(/bg-[\w-]+/, bgColor);
    notificationElement.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            ${type === 'success' 
                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />'
                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />'}
        </svg>
        <span>${message}</span>
    `;

    // Zobrazenie notifik√°cie
    setTimeout(() => {
        notificationElement.classList.add('opacity-100', 'pointer-events-auto');
    }, 10);

    // Skrytie notifik√°cie po 5 sekund√°ch
    setTimeout(() => {
        notificationElement.classList.remove('opacity-100', 'pointer-events-auto');
    }, 5000);
};


/**
 * Nov√° funkcia na zobrazenie notifik√°cie z datab√°zy v pravom hornom rohu.
 * Vytvor√≠ a spravuje doƒçasn√Ω element, ktor√Ω sa objav√≠ a po ƒçase zmizne.
 * @param {string} message - Spr√°va notifik√°cie.
 * @param {string} type - Typ notifik√°cie ('success', 'error', 'info').
 */
const showDatabaseNotification = (message, type = 'info') => {
    // Vytvor√≠me jedineƒçn√Ω ID pre ka≈æd√∫ notifik√°ciu
    const notificationId = `db-notification-${Date.now()}`;
    const notificationElement = document.createElement('div');
    
    notificationElement.id = notificationId;
    notificationElement.className = `
        fixed top-4 right-4 z-[100]
        bg-gray-800 text-white p-4 pr-10 rounded-lg shadow-lg
        transform translate-x-full transition-all duration-500 ease-out
        flex items-center space-x-2
    `;

    // Nastavenie obsahu a farby na z√°klade typu notifik√°cie
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : 'üîî';
    notificationElement.innerHTML = `
        <span>${icon}</span>
        <span>${message}</span>
        <button onclick="document.getElementById('${notificationId}').remove()" class="absolute top-1 right-1 text-gray-400 hover:text-white">&times;</button>
    `;

    document.body.appendChild(notificationElement);

    // Anim√°cia vstupu notifik√°cie
    setTimeout(() => {
        notificationElement.classList.remove('translate-x-full');
    }, 10);

    // Anim√°cia zmiznutia po 7 sekund√°ch
    setTimeout(() => {
        notificationElement.classList.add('translate-x-full');
        setTimeout(() => notificationElement.remove(), 500); // Odstr√°nime element po dokonƒçen√≠ anim√°cie
    }, 7000);
};

/**
 * Funkcia na odhl√°senie pou≈æ√≠vateƒæa
 */
const handleLogout = async () => {
    try {
        const auth = getAuth();
        await signOut(auth);
        console.log("header.js: Pou≈æ√≠vateƒæ bol √∫spe≈°ne odhl√°sen√Ω.");
        window.showGlobalNotification('√öspe≈°ne ste sa odhl√°sili.', 'success');
        // Zru≈°√≠me listener notifik√°ci√≠, ak existuje
        if (unsubscribeFromNotifications) {
            unsubscribeFromNotifications();
            unsubscribeFromNotifications = null;
            console.log("header.js: Listener notifik√°ci√≠ zru≈°en√Ω.");
        }
        // Presmerovanie na domovsk√∫ str√°nku po odhl√°sen√≠
        window.location.href = 'index.html';
    } catch (error) {
        console.error("header.js: Chyba pri odhl√°sen√≠:", error);
        window.showGlobalNotification('Chyba pri odhl√°sen√≠. Sk√∫ste to znova.', 'error');
    }
};

/**
 * Funkcia, ktor√° vr√°ti farbu hlaviƒçky na z√°klade role pou≈æ√≠vateƒæa.
 * @param {string} role - Rola pou≈æ√≠vateƒæa ('admin', 'hall', 'user').
 * @returns {string} Hex k√≥d farby.
 */
const getHeaderColorByRole = (role) => {
    switch (role) {
        case 'admin':
            return '#47b3ff'; // Farba pre admina
        case 'hall':
            return '#b06835'; // Farba pre halu
        case 'user':
            return '#9333EA'; // Farba pre be≈æn√©ho pou≈æ√≠vateƒæa
        default:
            return '#1D4ED8'; // Predvolen√° farba (bg-blue-800)
    }
}

/**
 * Funkcia na aktualiz√°ciu viditeƒænosti odkazov a farby hlaviƒçky na z√°klade stavu autentifik√°cie.
 * T√°to funkcia tie≈æ kontroluje, ƒçi s√∫ naƒç√≠tan√© v≈°etky potrebn√© d√°ta, a a≈æ potom zru≈°√≠ triedu "invisible".
 * @param {object} userProfileData - D√°ta profilu pou≈æ√≠vateƒæa.
 */
const updateHeaderLinks = (userProfileData) => {
    const authLink = document.getElementById('auth-link');
    const profileLink = document.getElementById('profile-link');
    const logoutButton = document.getElementById('logout-button');
    const headerElement = document.querySelector('header');
    
    if (!authLink || !profileLink || !logoutButton || !headerElement) {
        console.error("header.js: Niektor√© elementy hlaviƒçky neboli n√°jden√©.");
        return;
    }

    // A≈æ keƒè s√∫ v≈°etky d√°ta naƒç√≠tan√©, vykon√°me zmeny
    if (window.isGlobalAuthReady && window.registrationDates && window.hasCategories !== null) {
        if (userProfileData) {
            // Pou≈æ√≠vateƒæ je prihl√°sen√Ω
            authLink.classList.add('hidden');
            profileLink.classList.remove('hidden');
            logoutButton.classList.remove('hidden');
            // Nastav√≠me farbu hlaviƒçky podƒæa roly
            headerElement.style.backgroundColor = getHeaderColorByRole(userProfileData.role);

            // NOV√â: Skontrolujeme, ƒçi m√° admin povolen√© notifik√°cie
            if (userProfileData.role === 'admin' && userProfileData.displayNotifications) {
                if (!unsubscribeFromNotifications) {
                    setupNotificationListenerForAdmin();
                }
            } else {
                // Ak notifik√°cie nie s√∫ povolen√© alebo pou≈æ√≠vateƒæ nie je admin, zru≈°√≠me listener
                if (unsubscribeFromNotifications) {
                    unsubscribeFromNotifications();
                    unsubscribeFromNotifications = null;
                    console.log("header.js: Listener notifik√°ci√≠ zru≈°en√Ω, preto≈æe pou≈æ√≠vateƒæ nie je admin alebo ich nem√° povolen√©.");
                }
            }
        } else {
            // Pou≈æ√≠vateƒæ nie je prihl√°sen√Ω
            authLink.classList.remove('hidden');
            profileLink.classList.add('hidden');
            logoutButton.classList.add('hidden');
            // Nastav√≠me predvolen√∫ farbu
            headerElement.style.backgroundColor = getHeaderColorByRole(null);
            // Zru≈°√≠me listener, ak bol nejak√Ω nastaven√Ω (pre istotu)
            if (unsubscribeFromNotifications) {
                unsubscribeFromNotifications();
                unsubscribeFromNotifications = null;
                console.log("header.js: Listener notifik√°ci√≠ zru≈°en√Ω pri odhl√°sen√≠.");
            }
        }

        // Aktualizujeme viditeƒænos≈• odkazu na registr√°ciu
        updateRegistrationLinkVisibility(userProfileData);

        // Hlaviƒçka sa stane viditeƒænou LEN ak s√∫ v≈°etky d√°ta naƒç√≠tan√©
        headerElement.classList.remove('invisible');
    }
};

/**
 * Funkcia na aktualiz√°ciu viditeƒænosti odkazu "Registr√°cia na turnaj" na z√°klade
 * aktu√°lneho d√°tumu a existencie kateg√≥ri√≠.
 * Odkaz sa zobraz√≠ len vtedy, ak obe podmienky platia s√∫ƒçasne.
 * @param {object} userProfileData - D√°ta profilu pou≈æ√≠vateƒæa.
 */
const updateRegistrationLinkVisibility = (userProfileData) => {
    const registerLink = document.getElementById('register-link');
    if (!registerLink) return;

    // Podmienka: Mus√≠ by≈• otvoren√° registr√°cia (aktu√°lny d√°tum v rozmedz√≠) A z√°rove≈à musia existova≈• kateg√≥rie.
    const isRegistrationOpen = window.registrationDates && new Date() >= window.registrationDates.registrationStartDate.toDate() && new Date() <= window.registrationDates.registrationEndDate.toDate();
    const hasCategories = window.hasCategories;

    if (isRegistrationOpen && hasCategories) {
        registerLink.classList.remove('hidden');
        // Nastav√≠me spr√°vny href v z√°vislosti od prihl√°senia
        if (userProfileData) {
            registerLink.href = 'logged-in-registration.html';
        } else {
        registerLink.href = 'register.html';
        }
    } else {
        registerLink.classList.add('hidden');
    }
};

/**
 * NOV√Å FUNKCIA: Nastav√≠ listener pre notifik√°cie admina.
 * Poƒç√∫va na zmeny v kolekcii /notifications a zobrazuje nov√© spr√°vy.
 */
const setupNotificationListenerForAdmin = () => {
    if (!window.db) {
        console.warn("header.js: Firestore datab√°za nie je inicializovan√° pre notifik√°cie.");
        return;
    }

    // Zabezpeƒç√≠me, ≈æe predch√°dzaj√∫ci listener je zru≈°en√Ω, ak existuje
    if (unsubscribeFromNotifications) {
        unsubscribeFromNotifications();
    }
    
    // Z√≠skame referenciu na kolekciu notifik√°ci√≠
    const notificationsCollectionRef = collection(window.db, "notifications");
    
    // Vytvor√≠me dotaz pre notifik√°cie (napr. 10 najnov≈°√≠ch, ak je to potrebn√©)
    const q = query(notificationsCollectionRef, orderBy("timestamp", "desc"));

    // Nastav√≠me onSnapshot listener
    unsubscribeFromNotifications = onSnapshot(q, (snapshot) => {
        snapshot.docChanges().forEach((change) => {
            if (change.type === "added") {
                const newNotification = change.doc.data();
                // Notifik√°ciu zobraz√≠me len vtedy, ak sme ju e≈°te nezobrazili
                if (!displayedNotificationTimestamps.has(newNotification.timestamp.toMillis())) {
                    console.log("header.js: Nov√° notifik√°cia prijat√°:", newNotification);
                    // Dynamicky vytvor√≠me spr√°vu na z√°klade poƒæa 'changes'
                    let changesMessage = '';
                    if (Array.isArray(newNotification.changes) && newNotification.changes.length > 0) {
                        const changeLabel = newNotification.changes.length > 1 ? "si zmenil tieto √∫daje:" : "si zmenil tento √∫daj:";
                        changesMessage = `Pou≈æ√≠vateƒæ ${newNotification.userEmail} ${changeLabel}\n`;
                        changesMessage += newNotification.changes.join('\n');
                    } else if (typeof newNotification.changes === 'string') {
                        changesMessage = `Pou≈æ√≠vateƒæ ${newNotification.userEmail} si zmenil tento √∫daj:\n${newNotification.changes}`;
                    } else {
                        changesMessage = `Pou≈æ√≠vateƒæ ${newNotification.userEmail} vykonal zmenu.`;
                    }
                    
                    showDatabaseNotification(changesMessage, newNotification.type || 'info');
                    displayedNotificationTimestamps.add(newNotification.timestamp.toMillis());
                }
            }
        });
    }, (error) => {
        console.error("header.js: Chyba pri poƒç√∫van√≠ notifik√°ci√≠:", error);
    });

    console.log("header.js: Listener pre notifik√°cie admina nastaven√Ω.");
};


// Poƒç√∫va na zmeny v dokumentoch Firestore a aktualizuje stav registr√°cie
const setupFirestoreListeners = () => {
    try {
        if (!window.db) {
            console.warn("header.js: Firestore datab√°za nie je inicializovan√°.");
            return;
        }

        // Listener pre registraƒçn√© d√°ta
        const registrationDocRef = doc(window.db, "settings", "registration");
        onSnapshot(registrationDocRef, (docSnap) => {
            if (docSnap.exists()) {
                window.registrationDates = docSnap.data();
                console.log("header.js: D√°ta o registr√°cii aktualizovan√© (onSnapshot).", window.registrationDates);
            } else {
                window.registrationDates = null;
                console.warn("header.js: Dokument 'settings/registration' nebol n√°jden√Ω!");
            }
            updateHeaderLinks(window.globalUserProfileData);
        }, (error) => {
            console.error("header.js: Chyba pri poƒç√∫van√≠ d√°t o registr√°cii:", error);
        });

        // Listener pre kateg√≥rie
        const categoriesDocRef = doc(window.db, "settings", "categories");
        onSnapshot(categoriesDocRef, (docSnap) => {
            if (docSnap.exists()) {
                const categories = docSnap.data();
                window.hasCategories = Object.keys(categories).length > 0;
                console.log(`header.js: D√°ta kateg√≥ri√≠ aktualizovan√© (onSnapshot). Poƒçet kateg√≥ri√≠: ${Object.keys(categories).length}`);
            } else {
                window.hasCategories = false;
                console.warn("header.js: Dokument 'settings/categories' nebol n√°jden√Ω!");
            }
            updateHeaderLinks(window.globalUserProfileData);
        }, (error) => {
            console.error("header.js: Chyba pri poƒç√∫van√≠ d√°t o kateg√≥ri√°ch:", error);
        });

        // Spust√≠me ƒçasovaƒç, ktor√Ω ka≈æd√∫ sekundu kontroluje aktu√°lny ƒças a aktualizuje viditeƒænos≈• odkazu
        if (registrationCheckIntervalId) {
            clearInterval(registrationCheckIntervalId);
        }
        registrationCheckIntervalId = setInterval(() => {
            // Kontrola be≈æ√≠ ka≈æd√∫ sekundu, ale len ak m√°me potrebn√© d√°ta
            if (window.registrationDates) {
                updateRegistrationLinkVisibility(window.globalUserProfileData);
            }
        }, 1000); // 1000 ms = 1 sekunda
        console.log("header.js: ƒåasovaƒç pre kontrolu registr√°cie spusten√Ω.");
        
        // Zabezpeƒç√≠me, ≈æe sa ƒçasovaƒç zru≈°√≠, keƒè pou≈æ√≠vateƒæ opust√≠ str√°nku
        window.addEventListener('beforeunload', () => {
            if (registrationCheckIntervalId) {
                clearInterval(registrationCheckIntervalId);
                console.log("header.js: ƒåasovaƒç pre kontrolu registr√°cie zru≈°en√Ω.");
            }
        });

    } catch (error) {
        console.error("header.js: Chyba pri inicializ√°cii listenerov Firestore:", error);
    }
};

/**
 * Hlavn√° funkcia na naƒç√≠tanie hlaviƒçky a pripojenie skriptov.
 * Naƒç√≠tava header.html a vklad√° ho do placeholderu.
 */
window.loadHeaderAndScripts = async () => {
    try {
        const headerPlaceholder = document.getElementById('header-placeholder');
        const response = await fetch('header.html');
        
        if (!response.ok) throw new Error('Chyba pri naƒç√≠tan√≠ header.html');
        const headerHtml = await response.text();
        
        if (headerPlaceholder) {
            headerPlaceholder.innerHTML = headerHtml;
        }

        // Po naƒç√≠tan√≠ hlaviƒçky prid√°me event listener na tlaƒçidlo odhl√°senia
        const logoutButton = document.getElementById('logout-button');
        if (logoutButton) {
            logoutButton.addEventListener('click', handleLogout);
            console.log("header.js: Listener pre tlaƒçidlo odhl√°senia bol pridan√Ω.");
        }

        // Prid√°me listener na udalos≈•, ktor√∫ posiela 'authentication.js'
        window.addEventListener('globalDataUpdated', (event) => {
            console.log('header.js: Prijat√° udalos≈• "globalDataUpdated". Aktualizujem hlaviƒçku.');
            updateHeaderLinks(window.globalUserProfileData);
        });

        // Nastav√≠me listenery pre Firestore hneƒè po inicializ√°cii
        setupFirestoreListeners();

        // Zavol√°me funkciu raz hneƒè po naƒç√≠tan√≠ pre pr√≠pad, ≈æe authentication.js u≈æ vyslalo udalos≈•
        updateHeaderLinks(window.globalUserProfileData);

    } catch (error) {
        console.error("header.js: Chyba pri inicializ√°cii hlaviƒçky:", error);
    }
};

// Spustenie naƒç√≠tania hlaviƒçky, ak DOM u≈æ bol naƒç√≠tan√Ω
if (document.readyState === 'loading') {
    window.addEventListener('DOMContentLoaded', window.loadHeaderAndScripts);
} else {
    window.loadHeaderAndScripts();
}
