// header.js
// Tento s√∫bor spravuje dynamick√© zobrazenie navigaƒçn√Ωch odkazov v hlaviƒçke
// a obsluhuje akcie ako odhl√°senie pou≈æ√≠vateƒæa.
// Bol upraven√Ω tak, aby reagoval na zmeny v d√°tach registr√°cie a kateg√≥ri√≠ v re√°lnom ƒçase,
// a z√°rove≈à aby pravidelne kontroloval aktu√°lny ƒças, aby sa odkaz zobrazil alebo skryl
// presne v momente, keƒè sa prekroƒç√≠ d√°tum otvorenia alebo uzavretia registr√°cie.
// Nov√° funkcionalita: Prid√°va listener pre zobrazovanie notifik√°ci√≠ z datab√°zy pre administr√°torov.
// √öpravy: Zlep≈°enie form√°tovania notifik√°ci√≠ a zabezpeƒçenie, aby sa nov√© notifik√°cie zobrazovali pod star≈°√≠mi.
// Fix: Zabezpeƒçenie viditeƒænosti hlaviƒçky pri prvom naƒç√≠tan√≠ str√°nky.
// Nov√° √∫prava: Prid√°va funkciu na form√°tovanie telef√≥nnych ƒç√≠siel v notifik√°ci√°ch pre lep≈°iu ƒçitateƒænos≈•.

// Importy pre potrebn√© Firebase funkcie
import { getAuth, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, doc, onSnapshot, collection, query, updateDoc, arrayUnion } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
// Import zoznamu predvolieb
import { countryDialCodes } from "./countryDialCodes.js";

// Glob√°lna premenn√° na ulo≈æenie ID intervalu, aby sme ho mohli nesk√¥r zru≈°i≈•
let registrationCheckIntervalId = null;
let unsubscribeFromNotifications = null; // Nov√° glob√°lna premenn√° pre listener notifik√°ci√≠
// Nov√© premenn√© na sledovanie stavu naƒç√≠tania d√°t
window.isRegistrationDataLoaded = false;
window.isCategoriesDataLoaded = false;
let isFirestoreListenersSetup = false; // Nov√Ω flag pre sledovanie, ƒçi s√∫ listenery Firestore nastaven√©
// NOVINKA: Pridan√° glob√°lna premenn√° na indik√°ciu, ≈æe kateg√≥rie s√∫ naƒç√≠tan√©
window.areCategoriesLoaded = false;

// Premenn√° na sledovanie predch√°dzaj√∫ceho poƒçtu nepreƒç√≠tan√Ωch notifik√°ci√≠ pre inteligentn√© prekresƒæovanie
let previousNotificationCount = -1; 


// Glob√°lna funkcia pre zobrazenie notifik√°ci√≠
// Vytvor√≠ a spravuje mod√°lne okno pre spr√°vy o √∫spechu alebo chyb√°ch
window.showGlobalNotification = (message, type = 'success') => {
    let notificationElement = document.getElementById('global-notification');
    
    // Ak element e≈°te neexistuje, vytvor√≠me ho a prid√°me do tela dokumentu
    if (!notificationElement) {
        notificationElement = document.createElement('div');
        notificationElement.id = 'global-notification';
        // Pou≈æ√≠vame Tailwind CSS triedy pre ≈°t√Ωlovanie a pozicovanie
        notificationElement.className = `
            fixed top-4 left-1/2 transform -translate-x-1/2 z-[100]
            p-4 rounded-lg shadow-lg text-white font-semibold transition-all duration-300 ease-in-out
            flex items-center space-x-2
            opacity-0 pointer-events-none
        `;
        document.body.appendChild(notificationElement);
    }

    // Nastav√≠me obsah a farbu na z√°klade typu notifik√°cie
    // Pre √∫spech pou≈æijeme farbu #3A8D41, pre chybu ƒçerven√∫
    const bgColor = type === 'success' ? 'bg-[#3A8D41]' : 'bg-red-600';
    notificationElement.className = notificationElement.className.replace(/bg-[\w-]+/, bgColor);
    notificationElement.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            ${type === 'success' 
                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />'
                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />'}
        </svg>
        <span>${message}</span>
    `;

    // Zobrazenie notifik√°cie
    setTimeout(() => {
        notificationElement.classList.add('opacity-100', 'pointer-events-auto');
    }, 10);

    // Skrytie notifik√°cie po 5 sekund√°ch
    setTimeout(() => {
        notificationElement.classList.remove('opacity-100', 'pointer-events-auto');
    }, 7500);
};

/**
 * NOV√Å FUNKCIA: Form√°tuje telef√≥nne ƒç√≠slo na z√°klade predvolieb.
 * @param {string} phoneNumber - Neform√°tovan√© telef√≥nne ƒç√≠slo.
 * @returns {string} Naform√°tovan√© telef√≥nne ƒç√≠slo.
 */
const formatPhoneNumber = (phoneNumber) => {
    // Odstr√°nime v≈°etky neƒç√≠slicov√© znaky, okrem '+' na zaƒçiatku
    const cleaned = phoneNumber.replace(/[^+\d]/g, '');
    let number = cleaned;

    // N√°jdeme predvoƒæbu
    // Zoznam predvolieb je zoraden√Ω zostupne podƒæa dƒ∫≈æky, aby sa na≈°la najpresnej≈°ia zhoda
    const sortedDialCodes = countryDialCodes.sort((a, b) => b.dialCode.length - a.dialCode.length);
    let dialCode = '';

    for (const code of sortedDialCodes) {
        if (number.startsWith(code.dialCode)) {
            dialCode = code.dialCode;
            number = number.substring(dialCode.length);
            break;
        }
    }

    // Ak sa nena≈°la ≈æiadna predvoƒæba, vr√°time p√¥vodn√© ƒç√≠slo
    if (!dialCode) {
        return phoneNumber;
    }

    // Odstr√°nime medzery, ktor√© tam mohli zosta≈•
    number = number.replace(/\s/g, '');

    // Rozdel√≠me zvy≈°ok ƒç√≠sla do skup√≠n po troch ƒç√≠sliciach
    let formattedNumber = '';
    while (number.length > 0) {
        formattedNumber += number.substring(0, 3);
        number = number.substring(3);
        if (number.length > 0) {
            formattedNumber += ' ';
        }
    }

    return `${dialCode} ${formattedNumber}`.trim();
};

/**
 * Nov√° funkcia na form√°tovanie re≈•azca notifik√°cie s bold a italic textom.
 * Hƒæad√° ≈°tyri apostrofy a form√°tuje text medzi nimi.
 * @param {string} text - P√¥vodn√Ω re≈•azec.
 * @returns {string} Naform√°tovan√Ω re≈•azec.
 */
const formatNotificationMessage = (text) => {
    // N√°jdeme indexy apostrofov
    const firstApostrophe = text.indexOf("'");
    const secondApostrophe = text.indexOf("'", firstApostrophe + 1);
    const thirdApostrophe = text.indexOf("'", secondApostrophe + 1);
    const fourthApostrophe = text.indexOf("'", thirdApostrophe + 1);

    // Ak n√°jdeme v≈°etky ≈°tyri apostrofy, naform√°tujeme text
    if (firstApostrophe !== -1 && secondApostrophe !== -1 && thirdApostrophe !== -1 && fourthApostrophe !== -1) {
        let oldText = text.substring(firstApostrophe + 1, secondApostrophe);
        let newText = text.substring(thirdApostrophe + 1, fourthApostrophe);

        // Skontrolujeme, ƒçi ide o telef√≥nne ƒç√≠slo a naform√°tujeme ho
        if (oldText.startsWith('+') && newText.startsWith('+')) {
            oldText = formatPhoneNumber(oldText);
            newText = formatPhoneNumber(newText);
        }

        // Nahrad√≠me p√¥vodn√© ƒçasti nov√Ωmi s HTML tagmi
        let formattedText = text.substring(0, firstApostrophe);
        formattedText += `<em>${oldText}</em>`;
        formattedText += text.substring(secondApostrophe + 1, thirdApostrophe);
        formattedText += `<strong>${newText}</strong>`;
        formattedText += text.substring(fourthApostrophe + 1);
        
        return formattedText;
    }
    
    // Ak sa form√°t nezhoduje, vr√°time p√¥vodn√Ω text
    return text;
};

/**
 * Nov√° funkcia na zobrazenie notifik√°cie z datab√°zy v pravom hornom rohu.
 * Vytvor√≠ a spravuje doƒçasn√Ω element, ktor√Ω sa objav√≠ a po ƒçase zmizne.
 * @param {string} message - Spr√°va notifik√°cie.
 * @param {string} type - Typ notifik√°cie ('success', 'error', 'info').
 * @param {object} options - Voliteƒæn√© parametre pre sledovanie (summaryCount, notificationId).
 */
const showDatabaseNotification = (message, type = 'info', options = {}) => {
    let notificationContainer = document.getElementById('notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.id = 'notification-container';
        notificationContainer.className = `
            fixed top-4 right-4 z-[100]
            flex flex-col space-y-2
        `;
        document.body.appendChild(notificationContainer);
    }
    
    // Pou≈æijeme unik√°tne ID pre ka≈æd√∫ notifik√°ciu (alebo generick√© pre s√∫hrn)
    const notificationId = options.notificationId ? `db-notification-${options.notificationId}` : `db-summary-notification`;
    
    // Ak u≈æ notifik√°cia s t√Ωmto ID existuje, odstr√°nime ju predt√Ωm, ako vytvor√≠me nov√∫
    const existingEl = document.getElementById(notificationId);
    if (existingEl) {
        existingEl.remove();
    }

    const notificationElement = document.createElement('div');
    
    notificationElement.id = notificationId;
    notificationElement.className = `
        bg-gray-800 text-white p-4 pr-10 rounded-lg shadow-lg
        transform translate-x-full transition-all duration-500 ease-out
        flex items-center space-x-2
    `;

    // Prid√°me data- atrib√∫ty pre sledovanie typu notifik√°cie a poƒçtu pre s√∫hrn
    if (options.summaryCount !== undefined) {
        notificationElement.dataset.summaryCount = options.summaryCount;
    }
    if (options.notificationId) {
        notificationElement.dataset.notificationId = options.notificationId;
    }

    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : 'üîî'; 
    
    const formattedMessage = message.replace(/\n/g, '<br>');

    notificationElement.innerHTML = `
        <span>${icon}</span>
        <span>${formattedMessage}</span>
        <button onclick="document.getElementById('${notificationId}').remove()" class="absolute top-1 right-1 text-gray-400 hover:text-white">&times;</button>
    `;

    // Pripoj√≠me nov√∫ notifik√°ciu do kontajnera
    notificationContainer.appendChild(notificationElement);

    // Anim√°cia vstupu notifik√°cie
    setTimeout(() => {
        notificationElement.classList.remove('translate-x-full');
    }, 10);

    // Anim√°cia zmiznutia po 7 sekund√°ch (iba pre individu√°lne spr√°vy)
    // S√∫hrnn√© notifik√°cie sa sam√© nezavr√∫, pokiaƒæ sa nezmen√≠ ich stav (napr. poƒçet nepreƒç√≠tan√Ωch spr√°v klesne pod 3)
    if (options.notificationId) { // Ak je to individu√°lna notifik√°cia (m√° notificationId)
        setTimeout(() => {
            notificationElement.classList.add('translate-x-full');
            setTimeout(() => notificationElement.remove(), 500);
        }, 7000);
    }
};

/**
 * Funkcia na odhl√°senie pou≈æ√≠vateƒæa
 */
const handleLogout = async () => {
    try {
        const auth = getAuth();
        await signOut(auth);
        console.log("header.js: Pou≈æ√≠vateƒæ bol √∫spe≈°ne odhl√°sen√Ω.");
        window.showGlobalNotification('√öspe≈°ne ste sa odhl√°sili.', 'success');
        if (unsubscribeFromNotifications) {
            unsubscribeFromNotifications();
            unsubscribeFromNotifications = null;
            console.log("header.js: Listener notifik√°ci√≠ zru≈°en√Ω.");
        }
        window.location.href = 'login.html';
    } catch (error) {
        console.error("header.js: Chyba pri odhl√°sen√≠:", error);
        window.showGlobalNotification('Chyba pri odhl√°sen√≠. Sk√∫ste to znova.', 'error');
    }
};

/**
 * Funkcia, ktor√° vr√°ti farbu hlaviƒçky na z√°klade role pou≈æ√≠vateƒæa.
 * @param {string} role - Rola pou≈æ√≠vateƒæa ('admin', 'hall', 'user').
 * @returns {string} Hex k√≥d farby.
 */
const getHeaderColorByRole = (role) => {
    switch (role) {
        case 'admin':
            return '#47b3ff';
        case 'hall':
            return '#b06835';
        case 'user':
            return '#9333EA';
        default:
            return '#1D4ED8';
    }
}

/**
 * Funkcia na aktualiz√°ciu viditeƒænosti odkazov a farby hlaviƒçky na z√°klade stavu autentifik√°cie.
 * T√°to funkcia tie≈æ kontroluje, ƒçi s√∫ naƒç√≠tan√© v≈°etky potrebn√© d√°ta, a a≈æ potom zru≈°√≠ triedu "invisible.
 * @param {object} userProfileData - D√°ta profilu pou≈æ√≠vateƒæa.
 */
const updateHeaderLinks = (userProfileData) => {
    const authLink = document.getElementById('auth-link');
    const profileLink = document.getElementById('profile-link');
    const logoutButton = document.getElementById('logout-button');
    const headerElement = document.querySelector('header');
    
    if (!authLink || !profileLink || !logoutButton || !headerElement) {
        console.error("header.js: Niektor√© elementy hlaviƒçky neboli n√°jden√©.");
        return;
    }

    // NOV√Å PODMIENKA: Ak je str√°nka register.html, zachov√°me p√¥vodn√∫ farbu hlaviƒçky
    if (window.location.pathname.includes('register.html')) {
        headerElement.style.backgroundColor = '#1D4ED8'; // Nastavte pevn√∫ farbu (napr. p√¥vodn√∫ modr√∫)
        headerElement.classList.remove('invisible'); // Zabezpeƒçi≈•, ≈æe hlaviƒçka je viditeƒæn√°
        // Zobrazenie/skrytie odkazov pre registraƒçn√∫ str√°nku
        authLink.classList.remove('hidden');
        profileLink.classList.add('hidden');
        logoutButton.classList.add('hidden');
        // Skry≈• odkaz "Registr√°cia na turnaj" na samotnej registraƒçnej str√°nke, aby sa necyklovalo
        const registerLink = document.getElementById('register-link');
        if (registerLink) {
            registerLink.classList.add('hidden');
        }
        return; // Ukonƒç√≠me funkciu, aby sa nepou≈æila dynamick√° farba a logika pre ostatn√© str√°nky
    }

    // Podmienka pre zobrazenie hlaviƒçky pre ostatn√© str√°nky
    if (window.isGlobalAuthReady && window.isRegistrationDataLoaded && window.isCategoriesDataLoaded) {
        if (userProfileData) {
            authLink.classList.add('hidden');
            profileLink.classList.remove('hidden');
            logoutButton.classList.remove('hidden');
            headerElement.style.backgroundColor = getHeaderColorByRole(userProfileData.role);

            if (userProfileData.role === 'admin' && userProfileData.displayNotifications) {
                if (!unsubscribeFromNotifications) {
                    window.setupFirestoreListeners(); // Volanie glob√°lnej funkcie
                }
            } else {
                if (unsubscribeFromNotifications) {
                    unsubscribeFromNotifications();
                    unsubscribeFromNotifications = null;
                    console.log("header.js: Listener notifik√°ci√≠ zru≈°en√Ω, preto≈æe pou≈æ√≠vateƒæ nie je admin alebo ich nem√° povolen√©.");
                }
            }
        } else {
            authLink.classList.remove('hidden');
            profileLink.classList.add('hidden');
            logoutButton.classList.add('hidden');
            headerElement.style.backgroundColor = getHeaderColorByRole(null);
            if (unsubscribeFromNotifications) {
                unsubscribeFromNotifications();
                unsubscribeFromNotifications = null;
                console.log("header.js: Listener notifik√°ci√≠ zru≈°en√Ω pri odhl√°sen√≠.");
            }
        }

        updateRegistrationLinkVisibility(userProfileData);

        headerElement.classList.remove('invisible');
    }
};

/**
 * Funkcia na aktualiz√°ciu viditeƒænosti odkazu "Registr√°cia na turnaj" na z√°klade
 * aktu√°lneho d√°tumu a existencie kateg√≥ri√≠.
 * Odkaz sa zobraz√≠ len vtedy, ak obe podmienky platia s√∫ƒçasne.
 * @param {object} userProfileData - D√°ta profilu pou≈æ√≠vateƒæa.
 */
const updateRegistrationLinkVisibility = (userProfileData) => {
    const registerLink = document.getElementById('register-link');
    if (!registerLink) return;

    // Ak je pou≈æ√≠vateƒæ prihl√°sen√Ω (userProfileData existuje), skryjeme odkaz "Registr√°cia na turnaj"
    if (userProfileData) {
        registerLink.classList.add('hidden');
        return; // Ukonƒç√≠me funkciu, aby sa nerie≈°ili ƒèal≈°ie podmienky
    }

    const isRegistrationOpen = window.registrationDates && new Date() >= window.registrationDates.registrationStartDate.toDate() && new Date() <= window.registrationDates.registrationEndDate.toDate();
    const hasCategories = window.hasCategories;

    if (isRegistrationOpen && hasCategories) {
        registerLink.classList.remove('hidden');
        if (userProfileData) { // T√°to podmienka je teraz redundantn√°, ale ponech√°vam pre istotu
            registerLink.href = 'logged-in-registration.html';
        } else {
            registerLink.href = 'register.html';
        }
    } else {
        registerLink.classList.add('hidden');
    }
};

/**
 * NOV√Å FUNKCIA: Nastav√≠ listener pre notifik√°cie admina.
 * Poƒç√∫va na zmeny v kolekcii /notifications a zobrazuje nov√© spr√°vy.
 */
window.setupFirestoreListeners = () => { // ZMENA: Funkcia je teraz glob√°lna a m√° spr√°vny n√°zov
    if (!window.db) {
        console.warn("header.js: Firestore datab√°za nie je inicializovan√° pre notifik√°cie.");
        return;
    }

    if (unsubscribeFromNotifications) {
        unsubscribeFromNotifications();
    }
    
    const notificationsCollectionRef = collection(window.db, "notifications");
    
    unsubscribeFromNotifications = onSnapshot(notificationsCollectionRef, async (snapshot) => {
        const auth = getAuth();
        const userId = auth.currentUser ? auth.currentUser.uid : null;

        if (!userId) {
            console.log("header.js: Pou≈æ√≠vateƒæ nie je prihl√°sen√Ω, notifik√°cie sa nebud√∫ spracov√°va≈•.");
            const container = document.getElementById('notification-container');
            if (container) {
                while (container.firstChild) {
                    container.removeChild(container.firstChild);
                }
            }
            previousNotificationCount = -1; // Reset count
            return;
        }

        // Filtrujeme nepreƒç√≠tan√© notifik√°cie priamo zo snapshotu
        const unreadNotifications = snapshot.docs
            .map(doc => ({ id: doc.id, ...doc.data() }))
            .filter(notification => !(notification.seenBy || []).includes(userId));
        
        const currentUnreadCount = unreadNotifications.length;

        const notificationContainer = document.getElementById('notification-container');
        if (!notificationContainer) return; // Kontajner by mal by≈• vytvoren√Ω funkciou showDatabaseNotification

        // Urƒçujeme, ƒçi je potrebn√© √∫plne prekresli≈• zobrazenie notifik√°ci√≠
        // K tomu d√¥jde, ak poƒçet nepreƒç√≠tan√Ωch spr√°v prekroƒç√≠ prah (3), klesne na 0,
        // alebo ak sa zmen√≠ poƒçet spr√°v v re≈æime s√∫hrnu.
        const shouldRedrawAll = 
            (currentUnreadCount > 3 && previousNotificationCount <= 3) || // Prechod na s√∫hrn
            (currentUnreadCount <= 3 && previousNotificationCount > 3) || // Prechod na individu√°lne
            (currentUnreadCount === 0 && previousNotificationCount > 0) || // V≈°etky vyƒçisten√©
            (currentUnreadCount > 3 && currentUnreadCount !== previousNotificationCount && previousNotificationCount > 3); // Zmena poƒçtu v re≈æime s√∫hrnu


        // Vyƒçist√≠me existuj√∫ce notifik√°cie, ak je potrebn√© √∫pln√© prekreslenie
        if (shouldRedrawAll) {
            while (notificationContainer.firstChild) {
                notificationContainer.removeChild(notificationContainer.firstChild);
            }
        }

        if (currentUnreadCount > 3) {
            // Zobraz√≠me v≈°eobecn√∫ s√∫hrnn√∫ notifik√°ciu
            // Zobraz√≠me ju len ak je potrebn√© prekresli≈• v≈°etko, alebo ak e≈°te ≈æiadna nie je zobrazen√°
            // alebo ak sa zmenil poƒçet v s√∫hrne
            if (shouldRedrawAll || notificationContainer.children.length === 0 || notificationContainer.children[0].dataset.summaryCount !== String(currentUnreadCount)) {
                showDatabaseNotification(`M√°te ${currentUnreadCount} nov√© nepreƒç√≠tan√© upozornenia.`, 'info', { summaryCount: currentUnreadCount });
            }
        } else if (currentUnreadCount > 0 && currentUnreadCount <= 3) {
            // Zobraz√≠me jednotliv√© nepreƒç√≠tan√© notifik√°cie
            // Najsk√¥r si vytvor√≠me zoznam ID aktu√°lne zobrazen√Ωch notifik√°ci√≠
            const currentlyVisibleIds = new Set(Array.from(notificationContainer.children)
                                                    .map(el => el.dataset.notificationId)
                                                    .filter(Boolean));

            for (const notification of unreadNotifications) {
                // Zobraz√≠me len tie, ktor√© e≈°te nie s√∫ zobrazen√©
                if (!currentlyVisibleIds.has(notification.id)) {
                    let changesMessage = '';
                    if (Array.isArray(notification.changes) && notification.changes.length > 0) {
                        const changeLabel = notification.changes.length > 1 ? " zmenil tieto √∫daje:" : "zmenil tento √∫daj:";
                        changesMessage = `Pou≈æ√≠vateƒæ ${notification.userEmail} ${changeLabel}\n`;
                        const formattedChanges = notification.changes.map(changeString => formatNotificationMessage(changeString));
                        changesMessage += formattedChanges.join('<br>');
                    } else if (typeof notification.changes === 'string') {
                        changesMessage = `Pou≈æ√≠vateƒæ ${notification.userEmail} zmenil tento √∫daj:\n${formatNotificationMessage(notification.changes)}`;
                    } else {
                        changesMessage = `Pou≈æ√≠vateƒæ ${notification.userEmail} vykonal zmenu.`;
                    }
                    
                    showDatabaseNotification(changesMessage, notification.type || 'info', { notificationId: notification.id });
                    
                    // Oznaƒç√≠me notifik√°ciu ako preƒç√≠tan√∫ hneƒè po jej zobrazen√≠ individu√°lne
                    const notificationDocRef = doc(window.db, "notifications", notification.id);
                    try {
                        await updateDoc(notificationDocRef, {
                            seenBy: arrayUnion(userId)
                        });
                    } catch (e) {
                        console.error("header.js: Chyba pri aktualiz√°cii notifik√°cie 'seenBy':", e);
                    }
                }
            }
            // Odstr√°nime z DOM v≈°etky notifik√°cie, ktor√© u≈æ nie s√∫ nepreƒç√≠tan√© (napr. boli oznaƒçen√© ako preƒç√≠tan√© v 'Moja z√≥na')
            Array.from(notificationContainer.children).forEach(el => {
                const id = el.dataset.notificationId;
                if (id && !unreadNotifications.some(n => n.id === id)) {
                    el.remove();
                }
            });

        } else if (currentUnreadCount === 0) {
            // Ak nie s√∫ ≈æiadne nepreƒç√≠tan√© notifik√°cie, uist√≠me sa, ≈æe kontajner je pr√°zdny
            if (notificationContainer) {
                while (notificationContainer.firstChild) {
                    notificationContainer.removeChild(notificationContainer.firstChild);
                }
            }
        }
        
        previousNotificationCount = currentUnreadCount; // Aktualizujeme pre ƒèal≈°ie porovnanie

    }, (error) => {
        console.error("header.js: Chyba pri poƒç√∫van√≠ notifik√°ci√≠:", error);
    });

    console.log("header.js: Listener pre notifik√°cie admina nastaven√Ω.");
};


/**
 * Hlavn√° funkcia na naƒç√≠tanie hlaviƒçky a pripojenie skriptov.
 * Naƒç√≠tava header.html a vklad√° ho do placeholderu.
 */
window.loadHeaderAndScripts = async () => {
    try {
        const headerPlaceholder = document.getElementById('header-placeholder');
        const response = await fetch('header.html');
        
        if (!response.ok) throw new Error('Chyba pri naƒç√≠tan√≠ header.html');
        const headerHtml = await response.text();
        
        if (headerPlaceholder) {
            headerPlaceholder.innerHTML = headerHtml;
        }

        // Po naƒç√≠tan√≠ hlaviƒçky prid√°me event listener na tlaƒçidlo odhl√°senia
        const logoutButton = document.getElementById('logout-button');
        if (logoutButton) {
            logoutButton.addEventListener('click', handleLogout);
            console.log("header.js: Listener pre tlaƒçidlo odhl√°senia bol pridan√Ω.");
        }

        // Prid√°me listener na udalos≈•, ktor√∫ posiela 'authentication.js'
        window.addEventListener('globalDataUpdated', (event) => {
            console.log('header.js: Prijat√° udalos≈• "globalDataUpdated". Aktualizujem hlaviƒçku.');
            window.isGlobalAuthReady = true; 
            window.setupFirestoreListeners(); // Volanie glob√°lnej funkcie
            updateHeaderLinks(event.detail);
        });

        // Ak u≈æ je autentifik√°cia pripraven√° pri naƒç√≠tan√≠ tohto skriptu, spust√≠me listenery manu√°lne.
        if (window.isGlobalAuthReady) {
             console.log('header.js: Autentifikaƒçn√© d√°ta s√∫ u≈æ naƒç√≠tan√©, sp√∫≈°≈•am listenery Firestore.');
             window.setupFirestoreListeners(); // Volanie glob√°lnej funkcie
             updateHeaderLinks(window.globalUserProfileData);
        }

    } catch (error) {
        console.error("header.js: Chyba pri inicializ√°cii hlaviƒçky:", error);
    }
};

// Spustenie naƒç√≠tania hlaviƒçky, ak DOM u≈æ bol naƒç√≠tan√Ω
if (document.readyState === 'loading') {
    window.addEventListener('DOMContentLoaded', window.loadHeaderAndScripts);
} else {
    window.loadHeaderAndScripts();
}
